<%- include('header') %>
<div class="bg-gradient-to-br from-gray-50 to-gray-100 w-full text-sm mt-48 md:mt-0 min-h-screen">
    <div class="md:w-8/12 mx-auto bg-white px-8 mb-16 rounded-2xl shadow-xl">
        <h1 class="text-3xl font-bold text-center mb-8 text-gray-800">
            <i class="fas fa-shopping-cart text-primary mr-2"></i>Checkout
        </h1>
        <form id="checkoutForm">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div class="col-span-2 space-y-8">
                    <!-- Address Selector -->
                    <div class="bg-white p-6 rounded-xl shadow-md border border-gray-100 hover:shadow-lg transition-shadow duration-300">
                        <h2 class="font-semibold text-xl mb-6 flex items-center text-gray-800">
                            <i class="fas fa-map-marker-alt text-primary mr-2"></i>Select Delivery Address
                        </h2>
                        <% if (user && user.addresses && user.addresses.length > 0) { %>
                            <% user.addresses.forEach((address, index) => { %>
                                <div class="flex items-start space-x-4 mb-4 p-4 rounded-lg hover:bg-gray-50 transition-colors duration-200">
                                    <input type="radio" name="selectedAddress" id="address-<%= index %>" 
                                           value="<%= address._id %>" <%= index === 0 ? 'checked' : '' %> 
                                           class="mt-1 address-input w-4 h-4 text-primary" 
                                           data-addressId="<%= address._id %>">
                                    <label for="address-<%= index %>" class="w-full cursor-pointer">
                                        <p class="font-semibold text-gray-800"><%= address.name %></p>
                                        <p class="text-gray-600 mt-1"><%= address.line1 %>, <%= address.line2 %>, <%= address.city %>, <%= address.postalCode %></p>
                                        <p class="text-gray-500 mt-1"><i class="fas fa-phone-alt mr-2"></i><%= address.phone %></p>
                                    </label>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <div class="text-center py-8">
                                <i class="fas fa-home text-gray-300 text-5xl mb-4"></i>
                                <p class="text-gray-500 mb-4">No address found. Please add one from your profile.</p>
                            </div>
                        <% } %>
                        <div class="flex justify-end mt-6">
                            <a href="/account/address" class="bg-primary hover:bg-primary-dark text-white px-6 py-2 rounded-lg transition-colors duration-300 flex items-center">
                                <i class="fas fa-plus mr-2"></i>Add New Address
                            </a>
                        </div>
                    </div>

                    <!-- Available Offers -->
                    <div class="bg-white p-6 rounded-xl shadow-md border border-gray-100 hover:shadow-lg transition-shadow duration-300">
                        <h2 class="font-semibold text-xl mb-6 flex items-center text-gray-800">
                            <i class="fas fa-gift text-primary mr-2"></i>Available Offers
                        </h2>
                        <div class="space-y-3">
                            <% offers.forEach(offer => { %>
                                <div class="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                                    <i class="fas fa-tag text-green-600 mt-1"></i>
                                    <div>
                                        <span class="font-semibold text-green-800"><%= offer.name %></span>
                                        <p class="text-gray-600 mt-1"><%= offer.description %></p>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    </div>

                    <!-- Coupon Code Entry -->
                    <div class="bg-white p-6 rounded-xl shadow-md border border-gray-100 hover:shadow-lg transition-shadow duration-300">
                        <h2 class="font-semibold text-xl mb-6 flex items-center text-gray-800">
                            <i class="fas fa-ticket-alt text-primary mr-2"></i>Apply Coupon
                        </h2>
                        <div class="flex flex-col md:flex-row gap-4">
                            <% if (cart.cutoffAmount > 0) { %>
                                <p class="text-red-600"><i class="fas fa-exclamation-circle mr-2"></i>Coupons cannot be applied when a cutoff amount is present.</p>
                            <% } else { %>
                                <select id="couponCode" name="couponCode" 
                                        class="flex-1 border border-gray-300 p-3 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-all duration-300"
                                        title="Select a Coupon">
                                    <option value="" selected disabled>Select a Coupon</option>
                                    <% if (coupons && coupons.length > 0) { %>
                                        <% coupons.forEach(coupon => { %>
                                            <option value="<%= coupon.couponCode %>">
                                                <%= coupon.couponCode %> - <%= coupon.discount %><%= coupon.discountType === 'percentage' ? '%' : '' %> - Min Spend: ₹<%= coupon.minSpend %>
                                            </option>
                                        <% }) %>
                                    <% } else { %>
                                        <option value="" disabled>No coupons available</option>
                                    <% } %>
                                </select>
                                <div class="flex gap-2">
                                    <button type="button" onclick="applyCoupon()" id="applyCouponButton"
                                            class="bg-primary hover:bg-primary-dark text-white px-6 py-2 rounded-lg transition-colors duration-300">
                                        <i class="fas fa-check mr-2"></i>Apply
                                    </button>
                                    <button type="button" onclick="clearCoupon()" id="removeCouponButton"
                                            class="bg-red-500 hover:bg-red-600 text-white px-6 py-2 rounded-lg transition-colors duration-300">
                                        <i class="fas fa-times mr-2"></i>Remove
                                    </button>
                                </div>
                            <% } %>
                        </div>
                        <p id="couponFeedback" class="text-green-600 mt-3 hidden"><i class="fas fa-check-circle mr-2"></i>Coupon Applied!</p>
                        <p id="couponError" class="text-red-600 mt-3 hidden"><i class="fas fa-exclamation-circle mr-2"></i>Coupon cannot be applied. Minimum spend required: ₹<%= coupons.minSpend %></p>
                    </div>

                    <!-- Payment Methods -->
                    <div class="bg-white p-6 rounded-xl shadow-md border border-gray-100 hover:shadow-lg transition-shadow duration-300">
                        <h2 class="font-semibold text-xl mb-6 flex items-center text-gray-800">
                            <i class="fas fa-credit-card text-primary mr-2"></i>Payment Method
                        </h2>
                        <div class="space-y-4">
                            <div class="flex items-center p-4 rounded-lg hover:bg-gray-50 transition-colors duration-200">
                                <input type="radio" name="paymentMethod" id="razorpay" value="razorpay" class="w-4 h-4 text-primary">
                                <label for="razorpay" class="ml-3 flex items-center">
                                    <img src="/images/razorpay-icon.png" alt="Razorpay" class="h-6 mr-2">
                                    
                                </label>
                            </div>

                            <% if (cart && cart.subtotal <= 1000) { %>
                                <div class="flex items-center p-4 rounded-lg hover:bg-gray-50 transition-colors duration-200">
                                    <input type="radio" name="paymentMethod" id="cod" value="cod" checked class="w-4 h-4 text-primary">
                                    <label for="cod" class="ml-3 flex items-center">
                                        <i class="fas fa-money-bill-wave text-green-600 mr-2"></i>
                                        <span class="text-gray-700">Cash on Delivery</span>
                                    </label>
                                </div>
                            <% } else { %>
                                <p class="text-red-600 p-4 bg-red-50 rounded-lg">
                                    <i class="fas fa-exclamation-circle mr-2"></i>Cash on Delivery is not available for orders above ₹1000.
                                </p>
                            <% } %>

                            <div class="flex items-center p-4 rounded-lg hover:bg-gray-50 transition-colors duration-200">
                                <input type="radio" name="paymentMethod" id="wallet" value="wallet" class="w-4 h-4 text-primary">
                                <label for="wallet" class="ml-3 flex items-center">
                                    <i class="fas fa-wallet text-blue-600 mr-2"></i>
                                    <span class="text-gray-700">Wallet</span>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Order Summary -->
                <div class="col-span-1">
                    <div class="bg-white p-6 rounded-xl shadow-md border border-gray-100 hover:shadow-lg transition-shadow duration-300 sticky top-4">
                        <h2 class="text-xl font-bold mb-6 flex items-center text-gray-800">
                            <i class="fas fa-receipt text-primary mr-2"></i>Order Summary
                        </h2>

                        <!-- Cart Items -->
                        <div class="space-y-4 max-h-96 overflow-y-auto pr-2">
                            <% if (cart && cart.items && cart.items.length > 0) { %>
                                <% cart.items.forEach(item => { %>
                                    <div class="flex justify-between items-center p-3 rounded-lg hover:bg-gray-50 transition-colors duration-200">
                                        <div class="flex items-center space-x-4">
                                            <div class="relative w-16 h-16">
                                                <img src="<%= item.product.images[0] %>" 
                                                     alt="<%= item.product.name %>"
                                                     class="w-full h-full object-contain rounded-lg">
                                                <span class="absolute -top-2 -right-2 bg-primary text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                                                    <%= item.quantity %>
                                                </span>
                                            </div>
                                            <div>
                                                <h3 class="font-semibold text-gray-800 line-clamp-1"><%= item.product.name %></h3>
                                                <p class="text-gray-500 text-sm">₹<%= item.price.toFixed(2) %> × <%= item.quantity %></p>
                                            </div>
                                        </div>
                                        <p class="font-semibold text-gray-800">₹<%= (item.quantity * item.price).toFixed(2) %></p>
                                    </div>
                                <% }) %>
                            <% } else { %>
                                <div class="text-center py-8">
                                    <i class="fas fa-shopping-cart text-gray-300 text-5xl mb-4"></i>
                                    <p class="text-gray-500">No items in the cart.</p>
                                </div>
                            <% } %>
                        </div>

                        <!-- Price Details -->
                        <div class="mt-6 space-y-3 border-t pt-4">
                            <div class="flex justify-between text-gray-600">
                                <span>Subtotal</span>
                                <span class="font-bold" id="subtotal">₹<%= cart ? cart.subtotal ? cart.subtotal.toFixed(2) : '0.00' : '0.00' %></span>
                            </div>

                            <div class="flex justify-between text-green-600 hidden" id="couponDiscountContainer">
                                <span>Coupon Discount</span>
                                <span class="font-bold" id="couponDiscount">-₹0.00</span>
                            </div>

                            <% if (cart.offerDiscount && cart.offerDiscount > 0) { %>
                                <div class="flex justify-between text-green-600" id="offerDiscountContainer">
                                    <span>Offer Discount</span>
                                    <span class="font-bold" id="offerDiscount">-₹<%= cart.offerDiscount.toFixed(2) %></span>
                                </div>
                            <% } %>

                            <% if (cart.discount && cart.discount > 0) { %>
                                <div class="flex justify-between text-green-600" id="discountContainer">
                                    <span>Discount</span>
                                    <span class="font-bold" id="discount">-₹<%= cart.discount.toFixed(2) %></span>
                                </div>
                            <% } %>

                            <% if (cart.cutoffAmount && cart.cutoffAmount > 0) { %>
                                <div class="flex justify-between text-red-600" id="cutoffAmountContainer">
                                    <span>Cutoff Amount</span>
                                    <span class="font-bold" id="cutoffAmount">+₹<%= cart.cutoffAmount.toFixed(2) %></span>
                                </div>
                            <% } %>

                            <div class="flex justify-between text-lg font-bold text-gray-800 border-t pt-4 mt-4">
                                <span>Total</span>
                                <span id="total">₹<%= cart.total.toFixed(2) %></span>
                                <input type="hidden" name="totalAmount" id="totalAmount" value="<%= cart.total.toFixed(2) %>">
                            </div>
                        </div>

                        <!-- Place Order Button -->
                        <% if (cart && cart.items && cart.items.length > 0) { %>
                            <div class="mt-8">
                                <button type="button" id="place-order-button"
                                        class="w-full bg-primary hover:bg-primary-dark text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 flex items-center justify-center">
                                    <i class="fas fa-shopping-bag mr-2"></i>Place Order
                                </button>
                            </div>
                        <% } else { %>
                            <script>
                                toastr.error('Your cart is empty. Please add items to proceed to checkout.');
                            </script>
                        <% } %>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>
<%- include('footer') %>
       
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        
        <script>
            // Apply Coupon Feedback
            async function applyCoupon() {
                const couponCode = document.getElementById('couponCode').value;
                const cutoffAmountElement = document.getElementById('cutoffAmount');
                const cutoffAmount = cutoffAmountElement ? parseFloat(cutoffAmountElement.textContent.replace('+₹', '')) : 0;

                if (cutoffAmount > 0) {
                    displayCouponError('Coupons cannot be applied when a cutoff amount is present.');
                    toastr.error('Coupons cannot be applied when a cutoff amount is present.');
                    return;
                }

                const totalAmount = document.getElementById('totalAmount').value;

                try {
                    const response = await axios.post('/checkout/apply-coupon', { couponCode, totalAmount });
                    if (response.data.success) {
                        const { discountAmount, discountedTotal } = response.data;
                        updateCouponSuccess(discountAmount, discountedTotal);
                        disableCouponInputs();
                        sessionStorage.setItem('appliedCoupon', couponCode); // Store coupon in session storage
                    } else {
                        displayCouponError(response.data.message || 'Invalid coupon code.');
                        toastr.error(response.data.message || 'Invalid coupon code.');
                    }
                } catch (error) {
                    displayCouponError('Error applying coupon. Please try again later.');
                    toastr.error('Error applying coupon. Please try again later.');
                }
            }

            function clearCoupon() {
                // Reset fields
                document.getElementById('couponCode').disabled = false;
                document.getElementById('applyCouponButton').disabled = false;

                const couponDiscountElement = document.getElementById('couponDiscount');
                const totalElement = document.getElementById('total');
                const couponDiscountContainer = document.getElementById('couponDiscountContainer');
                const couponFeedbackElement = document.getElementById('couponFeedback');
                const totalAmountInput = document.getElementById('totalAmount');
                const offerDiscountElement = document.getElementById('offerDiscount');
                const offerDiscountContainer = document.getElementById('offerDiscountContainer');

                // Reset displayed values
                couponDiscountElement.textContent = '-₹0.00';
                couponDiscountContainer.classList.add('hidden');
                couponFeedbackElement.classList.add('hidden');

                // Calculate the new total amount considering other discounts and removing coupon discount
                const subtotal = parseFloat(document.getElementById('subtotal').textContent.replace('₹', ''));
                const offerDiscount = offerDiscountElement ? parseFloat(offerDiscountElement.textContent.replace('-₹', '')) : 0;
                const discount = parseFloat(document.getElementById('discount').textContent.replace('-₹', '')) || 0;

                // Check if cutoffAmount element exists and get its value
                let cutoffAmount = 0;
                const cutoffAmountElement = document.getElementById('cutoffAmount');
                if (cutoffAmountElement) {
                    cutoffAmount = parseFloat(cutoffAmountElement.textContent.replace('+₹', '')) || 0;
                }

                const newTotal = subtotal - discount - offerDiscount + cutoffAmount;

                // Update the total amount displayed
                totalElement.textContent = `₹${newTotal.toFixed(2)}`;
                totalAmountInput.value = newTotal.toFixed(2);

                // Ensure coupon is removed from session storage
                sessionStorage.removeItem('appliedCoupon');
            }

            // Ensure the clearCoupon function is called when the remove button is clicked
            document.getElementById('removeCouponButton').addEventListener('click', clearCoupon);

            function updateCouponSuccess(discountAmount, discountedTotal) {
                const couponDiscountElement = document.getElementById('couponDiscount');
                const couponDiscountContainer = document.getElementById('couponDiscountContainer');
                const couponFeedbackElement = document.getElementById('couponFeedback');
                const totalElement = document.getElementById('total');
                const totalAmountInput = document.getElementById('totalAmount');

                couponDiscountElement.textContent = `-₹${discountAmount.toFixed(2)}`;
                couponDiscountContainer.classList.remove('hidden');
                couponFeedbackElement.classList.remove('hidden');

                totalElement.textContent = `₹${discountedTotal.toFixed(2)}`;
                totalAmountInput.value = discountedTotal.toFixed(2);
            }

            // Helper function to show coupon error message
            function displayCouponError(message) {
                const couponErrorElement = document.getElementById('couponError');
                couponErrorElement.textContent = message;
                couponErrorElement.classList.remove('hidden');
                toastr.error(message);
            }

            function disableCouponInputs() {
                document.getElementById('couponCode').disabled = true;
                document.getElementById('applyCouponButton').disabled = true;
            }

            // Reload coupon application on page load
            window.addEventListener('load', () => {
                const cartHasItems = <%= cart && cart.items && cart.items.length > 0 ? 'true' : 'false' %>; // Dynamic check based on cart state
                if (cartHasItems === 'false') {
                    clearCoupon(); // Clear coupon if no items in cart
                } else {
                    const storedCoupon = sessionStorage.getItem('appliedCoupon');
                    if (storedCoupon) {
                        document.getElementById('couponCode').value = storedCoupon;
                        applyCoupon(); // Reapply coupon if stored
                    }
                }
            });

            // Function to clear coupon if the cart becomes empty
            function handleCartUpdate(cartItems) {
                if (cartItems.length === 0) {
                    clearCoupon();
                }
            }

            // Function to place order using axios and handle Razorpay
            const checkoutBtn = document.getElementById("place-order-button");

            checkoutBtn.addEventListener("click", (e) => {
                e.preventDefault();
           

                const addressInput = document.querySelectorAll(".address-input");
                let addressSelected = false;
                let addressId = null;
                addressInput.forEach((input) => {
                    if (input.checked) {
                        addressSelected = true;
                        addressId = input.getAttribute("data-addressId");
                    }
                });

                if (!addressSelected) {
                    Swal.fire({
                        icon: "warning",
                        text: "Please select a delivery address!",
                        title: "Field Missing!",
                    });
                    return;
                }

                const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked');

                if (!paymentMethod) {
                    Swal.fire({
                        icon: "warning",
                        text: "Please select a payment method",
                        title: "Field Missing",
                    });
                    return;
                }
                const payment = paymentMethod.getAttribute("id");



                if (payment === "razorpay") {
                    console.debug('Initiating Razorpay payment flow');
                    axios.post("/checkout/create-razorpay-order", {
                        selectedAddress: addressId,
                        paymentMethod: payment,
                        couponCode: document.getElementById('couponCode').value,
                        totalAmount: document.getElementById('totalAmount').value
                    })
                    .then((response) => {
                        console.debug("Razorpay order response:", response);

                        if (response.data.success) {
                            const options = {
                                key: "<%= process.env.RAZOR_KEY_ID %>", // Razorpay key ID
                                amount: response.data.amount, // Amount from Razorpay response
                                currency: response.data.currency, // Currency from Razorpay response
                                name: "TOYHUB",
                                description: "Order Payment",
                                order_id: response.data.orderId, // Order ID from Razorpay response
                                handler: async function (response) {
                                    // Handle successful payment
                                    console.debug("Razorpay payment response:", response);
                                    await Swal.fire({
                                        icon: "success",
                                        title: "Payment successful!",
                                        text: `Payment ID: ${response.razorpay_payment_id}`,
                                        showConfirmButton: true,
                                    });
                                    // Send payment confirmation to backend
                                    axios.post("/checkout/verify-payment", {
                                        addressId: addressId,
                                        payment: payment,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_signature: response.razorpay_signature,
                                        selectedAddress: addressId,
                                    })
                                    .then((response) => {
                                        window.location.href = `/account/orders`;
                                    })
                                    .catch((error) => {
                                        console.error("Error verifying payment:", error);
                                        Swal.fire({
                                            icon: "error",
                                            text: "Payment verification failed. Please contact support.",
                                            showConfirmButton: true,
                                        });
                                    });
                                },
                                prefill: {
                                    name: "username",
                                    email: "user@example.com", // Use the logged-in user's email
                                    contact: 2315469877,
                                },
                                theme: {
                                    color: "#FF8C00",
                                },
                            };

                            const razorpay = new Razorpay(options);

                            razorpay.on("payment.failed", function (response) {
                                console.error("Payment failed:", response);
                                Swal.fire({
                                    icon: "error",
                                    title: "Payment Failed",
                                    text: `Reason: ${response.error.description}`,
                                    showConfirmButton: true,
                                });

                                // Notify backend of payment failure
                                axios.post("/checkout", {
                                    selectedAddress: addressId,
                                    paymentMethod: payment,
                                    couponCode: document.getElementById('couponCode').value,
                                    paid: false,
                                })
                                .then((response) => {
                                    if (response.status === 200) {
                                        console.log('response.data', response.data);
                                        const { orderId, paymentMethod, totalAmount } = response.data;
                                        Swal.fire({
                                            title: '<span class="text-2xl font-bold text-green-600">Order Placed Successfully!</span>',
                                            html: `
                                                <div class="p-4">
                                                    <div class="mb-6">
                                                        <svg class="mx-auto" xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="#00A845" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                            <circle cx="12" cy="12" r="10"></circle>
                                                            <path d="M8 12l2 2 4-4"></path>
                                                        </svg>
                                                    </div>
                                                    <div class="space-y-3 text-left">
                                                        <p class="flex justify-between border-b pb-2">
                                                            <span class="font-semibold text-gray-600">Order ID:</span>
                                                            <span class="text-gray-800">${orderId}</span>
                                                        </p>
                                                        <p class="flex justify-between border-b pb-2">
                                                            <span class="font-semibold text-gray-600">Payment Method:</span>
                                                            <span class="text-gray-800">${paymentMethod}</span>
                                                        </p>
                                                        <p class="flex justify-between font-bold text-lg">
                                                            <span class="text-gray-600">Total Amount:</span>
                                                            <span class="text-green-600">₹${totalAmount}</span>
                                                        </p>
                                                    </div>
                                                </div>
                                            `,
                                            icon: false,
                                            customClass: {
                                                popup: 'rounded-lg shadow-xl',
                                                content: 'p-0'
                                            },
                                        }).then(() => {
                                            window.location.href = "/account/orders";
                                        });
                                    } else {
                                        Swal.fire({
                                            text: response.data.message || "Error while processing order. Please try again.",
                                            title: "Order Error",
                                            icon: "warning",
                                        });
                                    }
                                })
                                .catch((error) => {
                                    console.error("Error during order processing:", error);
                                    Swal.fire({
                                        text: error.response?.data?.message || "Error while processing order. Please try again.",
                                        title: "Error",
                                        icon: "error",
                                    });
                                });
                            });

                            razorpay.open();
                        }
                    })
                    .catch((error) => {
                        console.error("Error creating Razorpay order:", error);
                        Swal.fire({
                            icon: "error",
                            text: "An error occurred while processing the payment. Please try again later.",
                            showConfirmButton: true,
                        });
                    });
                }
                 else if (payment === "cod") {
                    //payment amount should be greater than 1000 for cash on delivery
                    if (document.getElementById('totalAmount').value > 1000) {
                        Swal.fire({
                            icon: "warning",
                            text: "Payment amount should be lesser than 1000 for cash on delivery",
                            showConfirmButton: true,
                        });
                        return;
                    }
                    axios.post("/checkout", {
                        selectedAddress: addressId,
                        paymentMethod: payment,
                        couponCode: document.getElementById('couponCode').value,
                        paid:false  
                    })
                        .then((response) => {
                            console.log("checkout response", response);
                            if (response.status === 200) {
                                const { orderId, paymentMethod, totalAmount } = response.data;
                                Swal.fire({
                                    title: "Order Success",
                                    html: `Order placed successfully!<br>Order ID: ${orderId}<br>Payment Method: ${paymentMethod}<br>Total Amount: ₹${totalAmount}`,
                                    icon: "success",
                                }).then(() => {
                                    window.location.href = "/account/orders";
                                });
                            } else {
                                Swal.fire({
                                    text: response.data.message || "Error while placing order. Please try again",
                                    title: "Out Of Stock",
                                    icon: "warning",
                                });
                            }
                        })
                        .catch((error) => {
                            console.error("Error during checkout:", error);
                            Swal.fire({
                                text: error.response.data.message || "Error while placing order. Please try again",
                                title: "Error",
                                icon: "error",
                            });
                        });
                } else if (payment === "wallet") {
                    axios.post("/checkout/wallet", {
                        selectedAddress: addressId,
                        paymentMethod: payment,
                        couponCode: document.getElementById('couponCode').value || null,
                        totalAmount: document.getElementById('totalAmount').value || 0
                    })
                        .then((response) => {
                            if (response.status === 200) {
                                const { orderId, paymentMethod, totalAmount } = response.data;
                                Swal.fire({
                                    title: "Order Success",
                                    html: `Order placed successfully!<br>Order ID: ${orderId}<br>Payment Method: ${paymentMethod}<br>Total Amount: ₹${totalAmount}`,
                                    icon: "success",
                                }).then(() => {
                                    window.location.href = "/account/orders";
                                });
                            } else {
                                Swal.fire({
                                    text: response.data.message || "Insufficient wallet balance",
                                    title: "Insufficient Wallet Balance",
                                    icon: "warning",
                                });
                            }
                        })
                        .catch((error) => {
                            console.error("Error during wallet checkout:", error);
                            Swal.fire({
                                text: error.response.data.message || "Error while placing order. Please try again",
                                title: "Error",
                                icon: "error",
                            });
                        });
                }
            });
        </script>