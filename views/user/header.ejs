
<style>
    .active-tab{
        background-color: #19D16F;
        color:white;
        padding: 5px 14px;
        border-radius: 5px;
    }

    /* Add transitions for mobile menu */
    #mobileMenu {
        transition: all 0.3s ease-in-out;
        transform-origin: top;
        transform: scaleY(0);
        opacity: 0;
        max-height: 0;
    }

    #mobileMenu.show {
        transform: scaleY(1);
        opacity: 1;
        max-height: 500px;
    }

    /* Hamburger button animation */
    .hamburger-spin {
        transition: transform 0.3s ease-in-out;
    }

    .hamburger-spin.active {
        transform: rotate(180deg);
    }

    /* Search suggestions dropdown */
    #suggestions {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        max-height: 300px;
        overflow-y: auto;
        z-index: 1000;
        margin-top: 4px;
    }
</style>


<header class="bg-white shadow-md fixed md:relative w-full top-0 left-0 z-10">
    <div class="container mx-auto flex items-center justify-between py-3 px-4">
        <!-- Logo (Visible on all screens, replaces "All Categories" on mobile) -->
        <div class="flex items-center gap-4">
            <!-- Hamburger Menu for Mobile -->
            <a href="/" class="text-xl font-bold flex-shrink-0">
                <img src="../images/logo.png" alt="ToyHub Logo" class="w-24 md:w-40 h-auto">
            </a>
        </div>
        <!-- Search Bar -->
        <div class="flex items-center flex-grow space-x-2 px-4 min-w-0 relative">
            <select class="hidden sm:block border border-gray-300 rounded-l-lg px-3 py-2 flex-shrink-0">
                <option>All Categories</option>
                <% if (locals.categories) { %>
                    <% categories.forEach(category => { %>
                        <option value="<%= category._id %>"><%= category.name %></option>
                    <% }) %>
                <% } %>
            </select>
            <input type="text" placeholder="Search for items..."
                class="border border-gray-300 flex-grow min-w-0 px-4 py-2 rounded-lg sm:rounded-none text-sm"
                id="searchInput" />
            <button onclick="searchItem(document.getElementById('searchInput').value)" class="bg-green-600 text-white px-4 py-2 rounded-lg sm:rounded-r-lg flex-shrink-0">
                <i class="fas fa-search"></i>
            </button>
            <div id="suggestions" class="absolute bg-white shadow-lg rounded-md hidden w-full"></div>
        </div>

        <!-- Desktop Navigation -->
        <div class="hidden md:flex items-center space-x-4">
            <a href="/account" class="text-gray-700 hover:text-green-600 flex items-center">
                <i class="fas fa-user mr-1"></i>
            </a>
            <a href="/cart" class="text-gray-700 hover:text-green-600">
                <i class="fas fa-shopping-cart"></i>
            </a>
            <a href="/account/wishlist" class="text-gray-700 hover:text-green-600">
                <i class="fas fa-heart"></i>
            </a>
            <a href="/account/orders" class="text-gray-700 hover:text-green-600">
                <i class="fas fa-box"></i>
            </a>
            <button id="logout-btn" onclick="logout()" class="text-gray-700 hover:text-green-600">
                <i class="fas fa-sign-out-alt"></i>
            </button>
            <span class="text-sm"><%= locals.name %></span>
        </div>
        <button id="hamburgerButton" class="md:hidden flex items-center hamburger-spin">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16">
                </path>
            </svg>
        </button> 
    </div>
    <!-- Mobile Menu -->

    <div id="mobileMenu" class="bg-white shadow-lg md:hidden">
        <a href="/account" class="block px-4 py-2 hover:bg-gray-100">Profile - <%= locals.name %></a>
        <a href="/cart" class="block px-4 py-2 hover:bg-gray-100">Cart</a>
        <a href="/account/wishlist" class="block px-4 py-2 hover:bg-gray-100">Wishlist</a>
        <a href="/orders" class="block px-4 py-2 hover:bg-gray-100">Orders</a>
        <button id="logout-btn" onclick="logout()" class="block px-4 py-2 hover:bg-gray-100">Logout</button>
    </div>


    <nav class="w-full bg-white shadow-lg rounded-lg mt-2 text-xs md:text-lg">
        <div class="flex justify-around p-4">
            <a href="#" class="text-gray-700 hover:text-gray-900 active-tab">Home</a>
            <a href="#" class="text-gray-700 hover:text-gray-900">About Us</a>
            <a href="#" class="text-gray-700 hover:text-gray-900">Contact</a>
            <a href="#" class="text-gray-700 hover:text-gray-900">Best Seller</a>
            <a href="#" class="text-gray-700 hover:text-gray-900">Todays Deals</a>
        </div>
    </nav>
</header>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    // Hamburger Menu Toggle
    const hamburgerButton = document.getElementById("hamburgerButton");
    const mobileMenu = document.getElementById("mobileMenu");

    hamburgerButton.addEventListener("click", () => {
        mobileMenu.classList.toggle("show");
        hamburgerButton.classList.toggle("active");
    });

    // Desktop Profile Dropdown Toggle
    const desktopProfileTrigger = document.getElementById("desktopProfileTrigger");
    const desktopProfileDropdown = document.getElementById("desktopProfileDropdown");

    if (desktopProfileTrigger) {
        desktopProfileTrigger.addEventListener("click", () => {
            desktopProfileDropdown.classList.toggle("hidden");
        });
    }

    // Close profile dropdown if clicked outside
    document.addEventListener("click", (event) => {
        if (desktopProfileDropdown && !desktopProfileTrigger?.contains(event.target) && !desktopProfileDropdown.contains(event.target)) {
            desktopProfileDropdown.classList.add("hidden");
        }
    });

    // Search functionality
    const searchInput = document.getElementById('searchInput');
    const suggestions = document.getElementById('suggestions');
    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        const value = this.value.trim();
        
        if (value.length < 2) {
            suggestions.classList.add('hidden');
            suggestions.innerHTML = '';
            return;
        }

        debounceTimer = setTimeout(() => {
            handleSearchInput(value);
        }, 300);
    });

    searchInput.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            searchItem(this.value);
        }
    });

    // Click outside to close suggestions
    document.addEventListener('click', function(event) {
        if (!searchInput.contains(event.target) && !suggestions.contains(event.target)) {
            suggestions.classList.add('hidden');
        }
    });

    function handleSearchInput(value) {
        if (!value) return;

        axios.get(`/search/?q=${encodeURIComponent(value)}`)
            .then(response => {
                const data = response.data;
                if (!data) {
                    suggestions.innerHTML = '<div class="p-3 text-red-500">No data received from server</div>';
                    suggestions.classList.remove('hidden');
                    return;
                }

                if (Array.isArray(data) && data.length > 0) {
                    suggestions.innerHTML = data
                        .map(item => `
                            <div class="p-3 cursor-pointer hover:bg-gray-100 border-b last:border-b-0" 
                                onclick="searchItem('${item.name?.replace(/'/g, "\\'")}')">
                                ${item.name || 'Unnamed Item'}
                            </div>
                        `).join('');
                    suggestions.classList.remove('hidden');
                } else {
                    suggestions.innerHTML = '<div class="p-3 text-gray-500">No results found</div>';
                    suggestions.classList.remove('hidden');
                }
            })
            .catch(error => {
                console.error('Search error:', error);
                suggestions.innerHTML = '<div class="p-3 text-red-500">Error fetching results: ' + error.message + '</div>';
                suggestions.classList.remove('hidden');
            });
    }

    function searchItem(query) {
        if (!query) return;
        window.location.href = `/search/results?q=${encodeURIComponent(query.trim())}`;
    }

    // Logout functionality
    function logout() {
        Swal.fire({
            title: 'Ready to Take Off?',
            text: "Your adventure with us is pausing for now!",
            icon: 'info',
            iconColor: '#19D16F',
            showCancelButton: true,
            confirmButtonText: 'Yes, Beam Me Out!',
            cancelButtonText: 'Wait, Not Yet!',
            confirmButtonColor: '#19D16F',
            cancelButtonColor: '#ff6b6b',
            background: '#fff',
            backdrop: `
                rgba(25, 209, 111, 0.1)
                url("/images/logo.png")
                right top
                no-repeat
            `,
            showClass: {
                popup: 'animate__animated animate__fadeInDown'
            },
            hideClass: {
                popup: 'animate__animated animate__fadeOutUp'
            }
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Preparing for Departure!',
                    text: 'Saving your progress...',
                    timer: 1500,
                    timerProgressBar: true,
                    didOpen: () => {
                        Swal.showLoading()
                    }
                }).then(() => {
                    window.location.href = '/user/logout';
                })
            }
        });
    }
</script>